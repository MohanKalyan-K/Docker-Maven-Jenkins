pipeline {
    agent any
    environment {
        MAVEN_HOME = tool 'MAVEN_HOME' // Jenkins Maven tool configured
        SONARQUBE_ENV = 'sonar-server' // SonarQube instance name in Jenkins
        DOCKER_IMAGE = 'my-app:latest' // Docker image name
    }
    tools {
        maven 'MAVEN_HOME' // Maven tool name configured in Jenkins
    }
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/MohanKalyan-K/Docker-Maven-Jenkins.git'
            }
        }

        stage('Build & Package') {
            agent {
                docker {
                    image 'maven:latest'
                    args '-v $HOME/.m2:/root/.m2' // To cache Maven dependencies
                }
            }
            steps {
                script {
                    sh "${MAVEN_HOME}/bin/mvn clean package"
                }
            }
        }

        stage('SonarQube Analysis') {
            agent {
                docker { image 'sonarqube:latest' }
            }
            steps {
                withSonarQubeEnv('SONARQUBE_ENV') { // Assuming SonarQube is configured
                    sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                }
            }
        }

        stage('SAST - Static Analysis') {
            agent {
                docker { image 'sast-tool:latest' } // Replace with the actual SAST tool
            }
            steps {
                sh 'sast-tool run --config sast-config.yml'
            }
        }

        stage('DAST - Dynamic Analysis') {
            agent {
                docker { image 'dast-tool:latest' } // Replace with the actual DAST tool
            }
            steps {
                sh 'dast-tool scan --url http://my-app-url'
            }
        }

        stage('End-to-End Testing') {
            agent {
                docker { image 'node:16-alpine' } // Assuming tests are run using Node.js
            }
            steps {
                sh 'npm install && npm run e2e-tests'
            }
        }

        stage('Create Docker Image') {
            agent {
                docker { image 'docker:latest' }
            }
            steps {
                script {
                    sh '''
                        docker build -t $DOCKER_IMAGE .
                        docker tag $DOCKER_IMAGE myrepo/$DOCKER_IMAGE
                        docker push myrepo/$DOCKER_IMAGE
                    '''
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
